<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title></title>
  
  
  <link href="hettps://deficentrain.github.io/atom.xml" rel="self"/>
  
  <link href="hettps://deficentrain.github.io/"/>
  <updated>2022-12-22T08:33:29.927Z</updated>
  <id>hettps://deficentrain.github.io/</id>
  
  <author>
    <name>Moci</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>第一次Pwn</title>
    <link href="hettps://deficentrain.github.io/2022/12/22/di-yi-ci-pwn/"/>
    <id>hettps://deficentrain.github.io/2022/12/22/di-yi-ci-pwn/</id>
    <published>2022-12-22T07:39:04.000Z</published>
    <updated>2022-12-22T08:33:29.927Z</updated>
    
    <content type="html"><![CDATA[<h1 id="以ctfshow-pwn02为例"><a class="markdownIt-Anchor" href="#以ctfshow-pwn02为例">#</a> 以 ctfshow Pwn02 为例</h1><p>[toc]</p><h2 id="1-查壳"><a class="markdownIt-Anchor" href="#1-查壳">#</a> #1 查壳</h2><p>利用 exeinfope 软件进行查壳，但本题是道入门题，并不需要查壳。（<s>才不是因为没下载呢。</s>）</p><h2 id="2-检测安全机制"><a class="markdownIt-Anchor" href="#2-检测安全机制">#</a> #2 检测安全机制</h2><p>利用 checksec + [filename] 进行检测（[checksec 简单讲解](<a href="https://www.jianshu.com/p/31449fdfe35f">Checksec - 简书 (jianshu.com)</a>)）</p><p><img src="%E7%AC%AC%E4%B8%80%E6%AC%A1Pwn.assets/image-20221222155505271.png" class="lazyload placeholder" data-srcset="%E7%AC%AC%E4%B8%80%E6%AC%A1Pwn.assets/image-20221222155505271.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221222155505271"></p><p>简单地说：</p><p>Stack：No canary found（没有防溢出）<br>NX:NX enabled（不可执行的）<br>PIE:No PIE（未使用随机地址）</p><h2 id="3-利用ida进行反编译"><a class="markdownIt-Anchor" href="#3-利用ida进行反编译">#</a> #3 利用 IDA 进行反编译</h2><p>如上图，该程序为 32 位程序，可使用 IDA Pro (x32) 打开。</p><p>在 FunctionsWindow 中找到 main 函数</p><p><img src="%E7%AC%AC%E4%B8%80%E6%AC%A1Pwn.assets/image-20221222160417648.png" class="lazyload placeholder" data-srcset="%E7%AC%AC%E4%B8%80%E6%AC%A1Pwn.assets/image-20221222160417648.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221222160417648"></p><p>点进去，按 F5 进行反汇编</p><p><img src="%E7%AC%AC%E4%B8%80%E6%AC%A1Pwn.assets/image-20221222160546348.png" class="lazyload placeholder" data-srcset="%E7%AC%AC%E4%B8%80%E6%AC%A1Pwn.assets/image-20221222160546348.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221222160546348"></p><p>其中，setvbuf () 函数相当于对文件流的规定，对文件进行操作，需要将磁盘中的文件写入内存中，相应的会在内存区建立一个缓存区用于与磁盘交换数据。stdout 是屏幕输出设备，stdin 是键盘输入设备，在开机时自动打开，相当于将缓存区清 0，可以做到及时输入输出，不会等到缓存区写满后才引入结果，对此不需要深究。详细自行搜索，puts () 输出字符串，发现 pwnme () 函数，双击查看其定义。</p><p><img src="%E7%AC%AC%E4%B8%80%E6%AC%A1Pwn.assets/image-20221222160659573.png" class="lazyload placeholder" data-srcset="%E7%AC%AC%E4%B8%80%E6%AC%A1Pwn.assets/image-20221222160659573.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221222160659573"></p><p>双击 fgets ()：</p><p><img src="%E7%AC%AC%E4%B8%80%E6%AC%A1Pwn.assets/image-20221222160811550.png" class="lazyload placeholder" data-srcset="%E7%AC%AC%E4%B8%80%E6%AC%A1Pwn.assets/image-20221222160811550.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221222160811550"></p><p>意义不明，其实是调用的库函数，自行百度即可（上文的 setvbuf () 也是库函数）<br>百度得到 fgets () 相当于对数组 s, 从 stdin 文件中输入 50 个字节，注意 char s 的长度为 9，但却输入了 50 个字节，未对输入字节正确控制导致栈溢出，可通过这个漏洞干一票大的。</p><blockquote><p>栈溢出漏洞（这时你可能需要一点内存知识了自行百度，多看一点集百家之言，自然会了解）（<a href="https://www.bilibili.com/video/BV1By4y1x7Yh">也有许多有趣的视频</a>）<br>溢出溢出，字面上就是往容器里加的水超过了水的容积，简单讲，栈溢出就是向栈中某个变量中写入的字节数超过了这个变量本身所申请的字节数，造成溢出。发生栈溢出的条件：程序必须向栈上写入数据。写入的数据大小没有被良好地控制。利用方式：覆盖程序的返回地址为攻击者所控制的地址，比如该地址为执行 shellcode 的地址 shellcode 是一段用于利用软件漏洞而执行的代码，shellcode 为 16 进制的机器码，可以让攻击者获得 shell，利用 pwntools 可自动生成，等用到再说。<br>可能造成栈溢出的函数有：gets, fgets, scanf, vscanf, sprintf, strcpy, strcat, bcopy<br> 摘自某大佬博客</p></blockquote><p>双击 s，跳转到其对应栈段，发现在 + 00000004 处出现 ==<strong>r</strong>==，这个 r 就是 ret（<a href="https://blog.csdn.net/striver1205/article/details/25695437">Push, Pop, call, leave 和 Ret 指令图解</a>）我们可以通过输入 9 字节占满 s 的大小，然后 + 4 覆盖 ret，让其返回到我们想要到的地方（轻则破坏程序，重则得到 shell）。</p><ul><li><p>为什么能做到这一点呢，就是因为栈的性质，栈是从高地址向下的，故从 - 00000009 开始向下 + 00000000 (此处为相对位置) 存储，由于未作出合理限制输入，故可以继续覆盖低地址中存储，ret 因此被覆盖。</p></li><li><p>当然我们的目的不是破坏程序，是 get shell。从左处 FunctionWindow 处可以看见还有很多没用调用的函数，我们可以通过栈溢出，跳转执行。</p></li></ul><p>Shift + F12 进入 IDA 字符串界面，发现 &quot;/bin/sh&quot;</p><p><img src="%E7%AC%AC%E4%B8%80%E6%AC%A1Pwn.assets/image-20221222161611636.png" class="lazyload placeholder" data-srcset="%E7%AC%AC%E4%B8%80%E6%AC%A1Pwn.assets/image-20221222161611636.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221222161611636"></p><blockquote><p>服务器一般架设在 Linux 内核之上，对于 Linux 来说一切都是文件的存在，而 /bin 存储了许多系统可执行文件目录：cat,mv,date…<br>/bin/sh 就是 Bourne shell</p></blockquote><p>双击跳转</p><p><img src="%E7%AC%AC%E4%B8%80%E6%AC%A1Pwn.assets/image-20221222161700413.png" class="lazyload placeholder" data-srcset="%E7%AC%AC%E4%B8%80%E6%AC%A1Pwn.assets/image-20221222161700413.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221222161700413"></p><p>在根据右边 stack+9↑o 双击后跳转至相应的 stack 处并反编译</p><p><img src="%E7%AC%AC%E4%B8%80%E6%AC%A1Pwn.assets/image-20221222161735914.png" class="lazyload placeholder" data-srcset="%E7%AC%AC%E4%B8%80%E6%AC%A1Pwn.assets/image-20221222161735914.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221222161735914"></p><p>看见了 stack () 函数调用了 system (&quot;/bin/sh&quot;), 于是我们可以通过栈溢出跳转至这里并执行。<br>既然要跳转至 stack ()，我们相对应的也要知道其首地址，拉大 FunctionWindows 后可以看见</p><p><img src="%E7%AC%AC%E4%B8%80%E6%AC%A1Pwn.assets/image-20221222161810737.png" class="lazyload placeholder" data-srcset="%E7%AC%AC%E4%B8%80%E6%AC%A1Pwn.assets/image-20221222161810737.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221222161810737"></p><p>stack () 函数起始地址为 0804850F</p><h2 id="4-编写exp"><a class="markdownIt-Anchor" href="#4-编写exp">#</a> #4 编写 exp</h2><p>在 Linux 下提前安装好 pwntools</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"pwn.challenge.ctf.show"</span><span class="token punctuation">,</span> <span class="token number">28111</span><span class="token punctuation">)</span><span class="token comment">#建立一个远程连接需要相应URL/IP和port当然这就是在前面创建的容器（服务器）信息，将remote对象保存至变量p中</span>    payload <span class="token operator">=</span> <span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">13</span> <span class="token comment">#数据打包，由于前文提到的在s处填入9+4个字节</span>    payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">0x0804850F</span><span class="token punctuation">)</span> <span class="token comment">#同上，p32()将整数值转为32位打包</span>    p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span> <span class="token comment">#调用对象p的方法，send()将shellcode送至服务器端</span>    p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#将控制权交给用户可使用打开的shell</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><a href="https://blog.csdn.net/qq_29343201/article/details/51337025">pwntools 使用简介（点击跳转）</a><br><a href="https://www.cnblogs.com/liuyimin/p/7512252.html">pwntools 各使用模块简介（点击跳转）</a><br><a href="http://brieflyx.me/2015/python-module/pwntools-intro/">exploit 利器 - pwntools（点击跳转）</a><br>当然官方的说明才是最好最全的，但是刚入门就简单了解一下看看文章即可（注意要博彩多家）</p></blockquote><p>运行该程序：</p><p><img src="%E7%AC%AC%E4%B8%80%E6%AC%A1Pwn.assets/image-20221222163133949.png" class="lazyload placeholder" data-srcset="%E7%AC%AC%E4%B8%80%E6%AC%A1Pwn.assets/image-20221222163133949.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221222163133949"></p><p><img src="%E7%AC%AC%E4%B8%80%E6%AC%A1Pwn.assets/image-20221222163213144.png" class="lazyload placeholder" data-srcset="%E7%AC%AC%E4%B8%80%E6%AC%A1Pwn.assets/image-20221222163213144.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20221222163213144"></p><p>注意：连接上一段时间后会自动断掉连接，此时再次执行脚本即可，所以手脚快一点。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;以ctfshow-pwn02为例&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#以ctfshow-pwn02为例&quot;&gt;#&lt;/a&gt; 以 ctfshow Pwn02 为例&lt;/h1&gt;
&lt;p&gt;[toc]&lt;/p&gt;
&lt;h2 id=&quot;1-查壳&quot;&gt;&lt;a </summary>
      
    
    
    
    
    <category term="Pwn" scheme="hettps://deficentrain.github.io/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="hettps://deficentrain.github.io/2022/10/12/hello-world/"/>
    <id>hettps://deficentrain.github.io/2022/10/12/hello-world/</id>
    <published>2022-10-12T15:13:41.058Z</published>
    <updated>2022-10-12T15:13:41.058Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start">#</a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post">#</a> Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server">#</a> Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files">#</a> Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites">#</a> Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
