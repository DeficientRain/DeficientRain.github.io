{"meta":{"title":"","subtitle":"","description":"","author":"Moci","url":"hettps://deficentrain.github.io","root":"/"},"pages":[{"title":"categories","date":"2022-10-14T15:48:53.000Z","updated":"2022-10-14T15:49:41.859Z","comments":true,"path":"categories/index.html","permalink":"hettps://deficentrain.github.io/categories/index.html","excerpt":"","text":""},{"title":"friends","date":"2022-10-14T15:51:34.000Z","updated":"2022-10-14T15:51:34.501Z","comments":true,"path":"friends/index.html","permalink":"hettps://deficentrain.github.io/friends/index.html","excerpt":"","text":""},{"title":"about","date":"2022-10-14T15:50:47.000Z","updated":"2022-10-14T15:51:09.902Z","comments":true,"path":"about/index.html","permalink":"hettps://deficentrain.github.io/about/index.html","excerpt":"","text":""},{"title":"tags","date":"2022-10-14T15:49:57.000Z","updated":"2022-10-14T15:50:33.470Z","comments":true,"path":"tags/index.html","permalink":"hettps://deficentrain.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"第一次Pwn","slug":"第一次Pwn","date":"2022-12-22T07:39:04.000Z","updated":"2022-12-22T08:33:29.927Z","comments":true,"path":"2022/12/22/di-yi-ci-pwn/","link":"","permalink":"hettps://deficentrain.github.io/2022/12/22/di-yi-ci-pwn/","excerpt":"","text":"# 以 ctfshow Pwn02 为例 [toc] # #1 查壳 利用 exeinfope 软件进行查壳，但本题是道入门题，并不需要查壳。（才不是因为没下载呢。） # #2 检测安全机制 利用 checksec + [filename] 进行检测（[checksec 简单讲解](Checksec - 简书 (jianshu.com))） 简单地说： Stack：No canary found（没有防溢出） NX:NX enabled（不可执行的） PIE:No PIE（未使用随机地址） # #3 利用 IDA 进行反编译 如上图，该程序为 32 位程序，可使用 IDA Pro (x32) 打开。 在 FunctionsWindow 中找到 main 函数 点进去，按 F5 进行反汇编 其中，setvbuf () 函数相当于对文件流的规定，对文件进行操作，需要将磁盘中的文件写入内存中，相应的会在内存区建立一个缓存区用于与磁盘交换数据。stdout 是屏幕输出设备，stdin 是键盘输入设备，在开机时自动打开，相当于将缓存区清 0，可以做到及时输入输出，不会等到缓存区写满后才引入结果，对此不需要深究。详细自行搜索，puts () 输出字符串，发现 pwnme () 函数，双击查看其定义。 双击 fgets ()： 意义不明，其实是调用的库函数，自行百度即可（上文的 setvbuf () 也是库函数） 百度得到 fgets () 相当于对数组 s, 从 stdin 文件中输入 50 个字节，注意 char s 的长度为 9，但却输入了 50 个字节，未对输入字节正确控制导致栈溢出，可通过这个漏洞干一票大的。 栈溢出漏洞（这时你可能需要一点内存知识了自行百度，多看一点集百家之言，自然会了解）（也有许多有趣的视频） 溢出溢出，字面上就是往容器里加的水超过了水的容积，简单讲，栈溢出就是向栈中某个变量中写入的字节数超过了这个变量本身所申请的字节数，造成溢出。发生栈溢出的条件：程序必须向栈上写入数据。写入的数据大小没有被良好地控制。利用方式：覆盖程序的返回地址为攻击者所控制的地址，比如该地址为执行 shellcode 的地址 shellcode 是一段用于利用软件漏洞而执行的代码，shellcode 为 16 进制的机器码，可以让攻击者获得 shell，利用 pwntools 可自动生成，等用到再说。 可能造成栈溢出的函数有：gets, fgets, scanf, vscanf, sprintf, strcpy, strcat, bcopy 摘自某大佬博客 双击 s，跳转到其对应栈段，发现在 + 00000004 处出现 ==r==，这个 r 就是 ret（Push, Pop, call, leave 和 Ret 指令图解）我们可以通过输入 9 字节占满 s 的大小，然后 + 4 覆盖 ret，让其返回到我们想要到的地方（轻则破坏程序，重则得到 shell）。 为什么能做到这一点呢，就是因为栈的性质，栈是从高地址向下的，故从 - 00000009 开始向下 + 00000000 (此处为相对位置) 存储，由于未作出合理限制输入，故可以继续覆盖低地址中存储，ret 因此被覆盖。 当然我们的目的不是破坏程序，是 get shell。从左处 FunctionWindow 处可以看见还有很多没用调用的函数，我们可以通过栈溢出，跳转执行。 Shift + F12 进入 IDA 字符串界面，发现 &quot;/bin/sh&quot; 服务器一般架设在 Linux 内核之上，对于 Linux 来说一切都是文件的存在，而 /bin 存储了许多系统可执行文件目录：cat,mv,date… /bin/sh 就是 Bourne shell 双击跳转 在根据右边 stack+9↑o 双击后跳转至相应的 stack 处并反编译 看见了 stack () 函数调用了 system (&quot;/bin/sh&quot;), 于是我们可以通过栈溢出跳转至这里并执行。 既然要跳转至 stack ()，我们相对应的也要知道其首地址，拉大 FunctionWindows 后可以看见 stack () 函数起始地址为 0804850F # #4 编写 exp 在 Linux 下提前安装好 pwntools from pwn import * def main(): p = remote(\"pwn.challenge.ctf.show\", 28111)#建立一个远程连接需要相应URL/IP和port当然这就是在前面创建的容器（服务器）信息，将remote对象保存至变量p中 payload = b'a' * 13 #数据打包，由于前文提到的在s处填入9+4个字节 payload += p32(0x0804850F) #同上，p32()将整数值转为32位打包 p.send(payload) #调用对象p的方法，send()将shellcode送至服务器端 p.interactive() #将控制权交给用户可使用打开的shell main() pwntools 使用简介（点击跳转） pwntools 各使用模块简介（点击跳转） exploit 利器 - pwntools（点击跳转） 当然官方的说明才是最好最全的，但是刚入门就简单了解一下看看文章即可（注意要博彩多家） 运行该程序： 注意：连接上一段时间后会自动断掉连接，此时再次执行脚本即可，所以手脚快一点。","categories":[],"tags":[{"name":"Pwn","slug":"Pwn","permalink":"hettps://deficentrain.github.io/tags/Pwn/"}]},{"title":"Hello World","slug":"hello-world","date":"2022-10-12T15:13:41.058Z","updated":"2022-10-12T15:13:41.058Z","comments":true,"path":"2022/10/12/hello-world/","link":"","permalink":"hettps://deficentrain.github.io/2022/10/12/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. # Quick Start # Create a new post $ hexo new \"My New Post\" More info: Writing # Run server $ hexo server More info: Server # Generate static files $ hexo generate More info: Generating # Deploy to remote sites $ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"Pwn","slug":"Pwn","permalink":"hettps://deficentrain.github.io/tags/Pwn/"}]}